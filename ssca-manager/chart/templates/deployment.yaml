apiVersion: apps/v1
kind: Deployment
metadata:
  name: ssca-manager
  namespace: {{ .Release.Namespace }}
  labels:
    {{- if .Values.global.commonLabels }}
      {{- include "harnesscommon.tplvalues.render" (dict "value" .Values.global.commonLabels "context" $) | nindent 4 }}
    {{- end }}
    {{- if .Values.global.commonAnnotations }}
  annotations:
    {{- include "harnesscommon.tplvalues.render" (dict "value" .Values.global.commonAnnotations "context" $) | nindent 4 }}
    {{- end }}
spec:
  selector:
    matchLabels:
      {{- include "ssca-manager.selectorLabels" . | nindent 6 }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{ .Values.maxSurge }}
      maxUnavailable: {{ .Values.maxUnavailable }}
  template:
    metadata:
      annotations:
        checksum/credentials-secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        checksum/config: {{ include (print $.Template.BasePath "/config.yaml") . | sha256sum }}
      {{- if .Values.podAnnotations }}
      {{- toYaml .Values.podAnnotations | nindent 8 }}
      {{- end }}
      {{- if .Values.global.commonAnnotations }}
      {{- include "harnesscommon.tplvalues.render" (dict "value" .Values.global.commonAnnotations "context" $) | nindent 8 }}
      {{- end }}
      {{- include "harnesscommon.monitoring.annotations" . | nindent 8 }}
      labels:
        app: ssca-manager
        {{- include "ssca-manager.selectorLabels" . | nindent 8 }}
        {{- if .Values.global.commonLabels }}
        {{- include "harnesscommon.tplvalues.render" (dict "value" .Values.global.commonLabels "context" $) | nindent 8 }}
        {{- end }}
        {{- if .Values.podLabels }}
        {{- include "harnesscommon.tplvalues.render" (dict "value" .Values.podLabels "context" $) | nindent 8 }}
        {{- end }}
    spec:
      {{ include "ssca-manager.pullSecrets" . | nindent 6 }}
      serviceAccountName: {{ include "ssca-manager.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
      {{- if .Values.global.database.mongo.installed }}
      - name: wait-for-mongo
        image: {{ include "common.images.image" (dict "imageRoot" .Values.waitForInitContainer.image "global" .Values.global) }}
        imagePullPolicy: IfNotPresent
        args:
          - "pod"
          - "-lapp=mongodb-replicaset"
      {{- end }}
      {{- if .Values.global.database.redis.installed }}
      - name: wait-for-redis
        image: {{ include "common.images.image" (dict "imageRoot" .Values.waitForInitContainer.image "global" .Values.global) }}
        imagePullPolicy: IfNotPresent
        args:
          - "pod"
          - "-lapp=redis-sentinel"
      {{- end }}
      containers:
        - name: ssca-manager
          image: {{ include "common.images.image" (dict "imageRoot" .Values.image "global" .Values.global) }}
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          envFrom:
            - configMapRef:
                name: ssca-manager
            - secretRef:
                name: ssca-manager
          env:
            {{- include "harnesscommon.dbconnectionv2.redisEnv" (dict "ctx" $ "userVariableName" "EVENTS_FRAMEWORK_REDIS_USERNAME" "passwordVariableName" "EVENTS_FRAMEWORK_REDIS_PASSWORD") | indent 12 }}
            {{- include "harnesscommon.dbconnectionv2.redisEnv" (dict "ctx" $ "userVariableName" "LOCK_CONFIG_REDIS_USERNAME" "passwordVariableName" "LOCK_CONFIG_REDIS_PASSWORD") | indent 12 }}
            {{- include "harnesscommon.dbconnectionv2.redisEnv" (dict "ctx" $ "userVariableName" "CACHE_CONFIG_REDIS_USERNAME" "passwordVariableName" "CACHE_CONFIG_REDIS_PASSWORD") | indent 12 }}
            {{- include "harnesscommon.dbv3.mongoEnv" (dict "ctx" $ "database" "ssca") | indent 12 }}
            {{- include "harnesscommon.dbv3.mongoConnectionEnv" (dict "ctx" $ "database" "ssca" "connectionURIVariableName" "MONGO_URI") | indent 12 }}
            {{- if .Values.s3.accessKeyId }}
            - name: S3_ACCESS_KEY_ID
              value: {{ .Values.s3.accessKeyId }}
            {{- else }}
            - name: S3_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.s3AccessKeyID.name }}
                  key: {{ .Values.s3AccessKeyID.key }}
            {{- end }}
            {{- if .Values.s3.secretAccessKey }}
            - name: S3_ACCESS_SECRET_KEY
              value: {{ .Values.s3.secretAccessKey }}
            {{- else }}
            - name: S3_ACCESS_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.s3SecretAccessKey.name }}
                  key: {{ .Values.s3SecretAccessKey.key }}
            {{- end }}
            {{- if .Values.extraEnvVars }}
            {{- include "harnesscommon.tplvalues.render" (dict "value" .Values.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 300
            timeoutSeconds: 5
            periodSeconds: 60
            failureThreshold: 2
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 60
            timeoutSeconds: 5
            periodSeconds: 5
          resources:
          {{- toYaml .Values.resources | nindent 12 }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - ssca-manager
            topologyKey: "kubernetes.io/hostname"
      {{- with .Values.affinity }}
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.extraVolumes }}
      volumes:
      {{- include "harnesscommon.tplvalues.render" ( dict "value" .Values.extraVolumes "context" $ ) | nindent 8 }}
      {{- end }}
