# Default values for ng-manager
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  kubeVersion: ""
  commonAnnotations: {}
  commonLabels: {}
  cg:
    enabled: false
  secrets:
    app:
      external:
        ## if FALSE, Generate all secrets within K8s Namespace
        ## If TRUE, use one of the followings kids to inject
        enabled: false
        kind:
          # use ExternalSecrets Operator
          externalSecrets: false
          # Use CSI Driver volume mount
          csiSecretDriver: false
    database:
      external:
        enabled: false
        kind:
          externalSecrets: false
          csiSecretDriver: false

  useExternalSecrets: false
  loadbalancerURL: ""
  database:
    postgres:
      ## - installed = true if installed within cluster
      installed: true
      ## - protocol to use for connection
      protocol: postgres
      ## - host array for external
      hosts:
        - postgres:5432
      ## - secret name containing external values
      secretName: ""
      ## - key within secret containing username
      userKey: ""
      ## - key within secret containing password
      passwordKey: ""
      ## - extra arguments set to connection string
      extraArgs: ""
    mongo:
      installed: true
      protocol: mongodb
      # --  provide default values if mongo.installed is set to false
      hosts: []
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
    timescaledb:
      installed: true
      protocol: "jdbc:postgresql"
      # --  provide default values if mongo.installed is set to false
      hosts:
        - timescaledb-single-chart:5432
      # -- Enable TimescaleDB SSL
      sslEnabled: false
      # -- TimescaleDB secrets
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              TIMESCALEDB_USERNAME: ""
              TIMESCALEDB_PASSWORD: ""
              TIMESCALEDB_SSL_ROOT_CERT: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                TIMESCALEDB_USERNAME:
                  name: ""
                  property: ""
                TIMESCALEDB_PASSWORD:
                  name: ""
                  property: ""
                TIMESCALEDB_SSL_ROOT_CERT:
                  name: ""
                  property: ""
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      certName: ""
      certKey: ""
    redis:
      installed: true
      protocol: "redis"
      # --  provide default values if redis.installed is set to false
      hosts:
        - redis:6379
      secretName: "redis-secret"
      userKey: "redis-user"
      passwordKey: "redis-password"
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              REDIS_USERNAME: ""
              REDIS_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                REDIS_USERNAME:
                  name: ""
                  property: ""
                REDIS_PASSWORD:
                  name: ""
                  property: ""
  license:
    cg: ''
    ng: ''
    secrets:
      kubernetesSecrets:
        - secretName: ""
          keys:
            NG_LICENSE: ""
      secretManagement: 
        externalSecretsOperator:
          - secretStore:
              name: ""
              kind: ""
            remoteKeys:
              NG_LICENSE:
                name: ""
                property: ""
  ccm:
    enabled: false
  opa:
    enabled: false
  chaos:
    enabled: false
  stackDriverLoggingEnabled: false
  smtpCreateSecret:
    enabled: false
    SMTP_PASSWORD: ""
    SMTP_HOST: ""
    SMTP_USERNAME: ""
    SMTP_USE_SSL: "true"
    SMTP_PORT: "465"
    secrets:
      kubernetesSecrets:
        - secretName: ""
          keys:
            SMTP_USERNAME: ""
            SMTP_PASSWORD: ""
            SMTP_HOST: ""
            SMTP_PORT: ""
            SMTP_USE_SSL: ""
      secretManagement: 
        externalSecretsOperator:
          - secretStore:
              name: ""
              kind: ""
            remoteKeys:
              SMTP_USERNAME:
                name: ""
                property: ""
              SMTP_PASSWORD:
                name: ""
                property: ""
              SMTP_HOST:
                name: ""
                property: ""
              SMTP_PORT:
                name: ""
                property: ""
              SMTP_USE_SSL:
                name: ""
                property: ""
  ingress:
    # -- create ingress objects
    enabled: false
    # -- set ingress object classname
    className: harness
    # -- set host of ingressObjects
    hosts:
      - my-host.example.org
    # -- set tls for ingress objects
    tls:
      enabled: true
      secretName: ''
    # -- add annotations to ingress objects
    objects:
      annotations: { }
  istio:
    # -- create virtualServices objects
    enabled: false
    # -- create gateway and use in virtualservice
    gateway:
      create: false
    # -- if gateway not created, use specified gateway and host
    virtualService:
      gateways:
      hosts:
  proxy:
    enabled: false
    host: localhost
    port: 80
    username: ""
    password: ""
    protocol: http
  awsServiceEndpointUrls:
    enabled: false
    endPointRegion: us-east-2
    stsEndPointUrl: https://sts.us-east-2.amazonaws.com
    ecsEndPointUrl: https://ecs.us-east-2.amazonaws.com
    cloudwatchEndPointUrl: https://monitoring.us-east-2.amazonaws.com
redis:
  protocol: ""
  hosts: []
  secretName: ""
  userKey: ""
  passwordKey: ""
  extraArgs: ""
  secrets:
    kubernetesSecrets:
      - secretName: ""
        keys:
          REDIS_USERNAME: ""
          REDIS_PASSWORD: ""
    secretManagement:
      externalSecretsOperator:
        - secretStore:
            name: ""
            kind: ""
          remoteKeys:
            REDIS_USERNAME:
              name: ""
              property: ""
            REDIS_PASSWORD:
              name: ""
              property: ""

timescaledb:
  # -- TimescaleDB host names
  hosts: []
  # -- Enable TimescaleDB SSL
  # sslEnabled: false
  # -- TimescaleDB secrets
  secrets:
    kubernetesSecrets:
      - secretName: ""
        keys:
          TIMESCALEDB_USERNAME: ""
          TIMESCALEDB_PASSWORD: ""
          TIMESCALEDB_SSL_ROOT_CERT: ""
    secretManagement:
      externalSecretsOperator:
        - secretStore:
            name: ""
            kind: ""
          remoteKeys:
            TIMESCALEDB_USERNAME:
              name: ""
              property: ""
            TIMESCALEDB_PASSWORD:
              name: ""
              property: ""
            TIMESCALEDB_SSL_ROOT_CERT:
              name: ""
              property: ""

database:
  mongo:
    ngharness:
      enabled: false
      protocol: ""
      hosts: []
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement: 
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
    notifications:
      enabled: false
      protocol: ""
      hosts: []
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement: 
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
    pmsharness:
      enabled: false
      protocol: ""
      hosts: []
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement: 
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""

replicaCount: 1
maxSurge: 1
maxUnavailable: 0

allowedOrigins: ""

appLogLevel: "INFO"

image:
  registry: docker.io
  repository: harness/ng-manager-signed
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "80209"
  digest: ""
  imagePullSecrets: []

initContainer:
  image:
    registry: docker.io
    repository: busybox
    tag: "1.35.0"
    digest: ""
    imagePullSecrets: []

waitForInitContainer:
  image:
    registry: docker.io
    repository: harness/helm-init-container
    pullPolicy: IfNotPresent
    tag: "latest"
    digest: ""
    imagePullSecrets: []

mongoSecrets:
  userName:
    name: harness-secrets
    key: mongodbUsername
  password:
    name: mongodb-replicaset-chart
    key: mongodb-root-password

ceSecret:
  access_key:
    name: nextgen-ce
    key: AWS_ACCESS_KEY
  secret_key:
    name: nextgen-ce
    key: AWS_SECRET_KEY
  destination_bucket:
    name: nextgen-ce
    key: AWS_DESTINATION_BUCKET
  template_url:
    name: nextgen-ce
    key: AWS_TEMPLATE_LINK

ceGcpSetupConfigGcpProjectId: "placeHolderGcpProjectId"

timescaleSecret:
  password:
    name: harness-secrets
    key: timescaledbPostgresPassword

java:
  memory: "4096m"

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "harness-default"

podAnnotations: {}

imagePullSecrets: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
  runAsUser: 65534
  runAsNonRoot: true
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

probes:
  readinessProbe:
    httpGet:
      path: /health
      port: http-ng-manager
    timeoutSeconds: 2
    periodSeconds: 10
    failureThreshold: 5
  livenessProbe:
    httpGet:
      path: /health
      port: http-ng-manager
    timeoutSeconds: 2
    periodSeconds: 10
    failureThreshold: 5
  startupProbe:
    httpGet:
      path: /health
      port: http-ng-manager
    timeoutSeconds: 2
    periodSeconds: 10
    failureThreshold: 25

service:
  annotations: {}
  type: ClusterIP
  protocol: TCP
  port: 7090
  grpcport: 9979
  gitsyncgrpcport: 13002

resources:
  limits:
    memory: 8192Mi
  requests:
    cpu: 2
    memory: 200Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPU: ""
  targetMemory: ""
nodeSelector: {}

tolerations: []

affinity: {}

additionalConfigs: {}

java17flags: ""

# extraVolumes:
# - name: volume-test
#   configMap:
#     name: test-config
#     readOnly: true
extraVolumes: []

# extraVolumeMounts:
#   - name: test-volume-mount
#     mountPath: /opt/harness/config
extraVolumeMounts: []

# lifecycleHooks:
#   postStart:
#     exec:
#       command:
#   preStop:
#     exec:
#       command:

# extraEnvVars:
# - name: POD_NAME
#   valueFrom:
#     fieldRef:
#       fieldPath: metadata.name
extraEnvVars: []

virtualService:
  annotations: {}
ingress:
  annotations: {}

secrets:
  default:
    LOG_STREAMING_SERVICE_TOKEN: c76e567a-b341-404d-a8dd-d9738714eb82
    OPA_SERVER_SECRET: dOkdsVqdRPPRJG31XU0qY4MPqmBBMk0PTAGIKM6O7TGqhjyxScIdJe80mwh5Yb5zF3KxYBHw6B3Lfzlq
    GITOPS_SERVICE_SECRET: HVSKUYqD4e5Rxu12hFDdCJKGM64sxgEynvdDhaOHaTHhwwn0K4Ttr0uoOxSsEVYNrUU=
    CE_AWS_ACCESS_KEY: ""
    CE_AWS_SECRET_KEY: ""
    CE_AWS_DESTINATION_BUCKET: ""
    CE_AWS_TEMPLATE_URL: ""
  kubernetesSecrets:
    - secretName: ""
      keys:
        LOG_STREAMING_SERVICE_TOKEN: ""
        OPA_SERVER_SECRET: ""
        GITOPS_SERVICE_SECRET: ""
        CE_AWS_ACCESS_KEY: ""
        CE_AWS_SECRET_KEY: ""
        CE_AWS_DESTINATION_BUCKET: ""
        CE_AWS_TEMPLATE_URL: ""
  secretManagement:
    externalSecretsOperator:
      - secretStore:
          name: ""
          kind: ""
        remoteKeys:
          LOG_STREAMING_SERVICE_TOKEN:
            name: ""
            property: ""
          OPA_SERVER_SECRET:
            name: ""
            property: ""
          GITOPS_SERVICE_SECRET:
            name: ""
            property: ""
          CE_AWS_ACCESS_KEY:
            name: ""
            property: ""
          CE_AWS_SECRET_KEY:
            name: ""
            property: ""
          CE_AWS_DESTINATION_BUCKET:
            name: ""
            property: ""  
          CE_AWS_TEMPLATE_URL:
            name: ""
            property: ""             
