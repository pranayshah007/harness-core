apiVersion: apps/v1
kind: Deployment
metadata:
  name: nextgen-ce
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "nextgen-ce.labels" . | nindent 4 }}
    {{- if .Values.global.commonLabels }}
    {{- include "harnesscommon.tplvalues.render" ( dict "value" .Values.global.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.global.commonAnnotations }}
  annotations: {{- include "harnesscommon.tplvalues.render" ( dict "value" .Values.global.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{.Values.maxSurge}}
      maxUnavailable: {{.Values.maxUnavailable}}
  selector:
    matchLabels:
      {{- include "nextgen-ce.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- if or .Values.global.commonAnnotations .Values.podAnnotations }}
      annotations:
        {{- with .Values.podAnnotations }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if .Values.global.commonAnnotations }}
          {{- include "harnesscommon.tplvalues.render" ( dict "value" .Values.global.commonAnnotations "context" $ ) | nindent 8 }}
        {{- end }}
      {{- end }}
      labels:
        app: nextgen-ce
        {{- include "nextgen-ce.selectorLabels" . | nindent 8 }}
        {{- if .Values.global.commonLabels }}
        {{- include "harnesscommon.tplvalues.render" ( dict "value" .Values.global.commonLabels "context" $ ) | nindent 8 }}
        {{- end }}
        {{- if .Values.podLabels }}
        {{- include "harnesscommon.tplvalues.render" (dict "value" .Values.podLabels "context" $) | nindent 8 }}
        {{- end }}
    spec:
      {{- include "nextgen-ce.pullSecrets" . | nindent 6 }}
      serviceAccountName: {{ include "nextgen-ce.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
    #waits only for mongo & timescale to start
      {{- if .Values.global.database.mongo.installed }}
      - name: wait-for-mongo
        image: {{ include "common.images.image" (dict "imageRoot" .Values.waitForInitContainer.image "global" .Values.global) }}
        imagePullPolicy: IfNotPresent
        args:
          - "pod"
          - "-lapp=mongodb-replicaset"
      {{- end }}
      {{- if .Values.global.database.timescaledb.installed }}
      - name: wait-for-timescale
        image: {{ include "common.images.image" (dict "imageRoot" .Values.waitForInitContainer.image "global" .Values.global) }}
        imagePullPolicy: IfNotPresent
        args:
          - "pod"
          - "-lapp=timescaledb-single-chart"
      {{- end }}
      {{- if .Values.global.database.clickhouse.enabled }}
      - name: wait-for-clickhouse
        image: {{ include "common.images.image" (dict "imageRoot" .Values.waitForInitContainer.image "global" .Values.global) }}
        imagePullPolicy: IfNotPresent
        args:
          - "pod"
          - "-lapp=clickhouse"
      {{- end }}
      containers:
        - name: nextgen-ce
          securityContext:
            {{- toYaml .Values.securityContext | indent 12 }}
          {{- if .Values.global.database.clickhouse.enabled }}
          image: {{ include "common.images.image" (dict "imageRoot" .Values.imageClickhouseEnabled "global" .Values.global) }}
          {{- else }}
          image: {{ include "common.images.image" (dict "imageRoot" .Values.image "global" .Values.global) }}
          {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          livenessProbe:
            httpGet:
              path: /ccm/api/health
              port: {{ .Values.service.port }}
            initialDelaySeconds: 30
            failureThreshold: 10
            periodSeconds: 15
          readinessProbe:
            httpGet:
              path: /ccm/api/health
              port: {{ .Values.service.port }}
            initialDelaySeconds: 30
            failureThreshold: 10
            periodSeconds: 15
          envFrom:
            - configMapRef:
                name: nextgen-ce
          env:
            {{- include "harnesscommon.dbconnectionv2.redisEnv" (dict "ctx" $ "userVariableName" "EVENTS_FRAMEWORK_REDIS_USERNAME" "passwordVariableName" "EVENTS_FRAMEWORK_REDIS_PASSWORD") | indent 12 }}
            {{- include "harnesscommon.dbconnectionv2.mongoEnv" (dict "ctx" $) | indent 12 }}
            {{- include "harnesscommon.dbconnectionv2.timescaleEnv" (dict "ctx" .) | indent 12 }}
            {{- include "harnesscommon.secrets.manageAppEnv" (dict "ctx" $ "variableName" "JWT_AUTH_SECRET" "defaultKubernetesSecretName" "nextgen-ce" "defaultKubernetesSecretKey" "JWT_AUTH_SECRET") | indent 12 }}
            {{- include "harnesscommon.secrets.manageAppEnv" (dict "ctx" $ "variableName" "NEXT_GEN_MANAGER_SECRET" "defaultKubernetesSecretName" "nextgen-ce" "defaultKubernetesSecretKey" "NEXT_GEN_MANAGER_SECRET") | indent 12 }}
            {{- include "harnesscommon.secrets.manageAppEnv" (dict "ctx" $ "variableName" "JWT_IDENTITY_SERVICE_SECRET" "defaultKubernetesSecretName" "nextgen-ce" "defaultKubernetesSecretKey" "JWT_IDENTITY_SERVICE_SECRET") | indent 12 }}
            {{- include "harnesscommon.secrets.manageAppEnv" (dict "ctx" $ "variableName" "NOTIFICATION_CLIENT_SECRET" "defaultKubernetesSecretName" "nextgen-ce" "defaultKubernetesSecretKey" "NOTIFICATION_CLIENT_SECRET") | indent 12 }}
            {{- include "harnesscommon.secrets.manageAppEnv" (dict "ctx" $ "variableName" "ACCESS_CONTROL_SECRET" "defaultKubernetesSecretName" "nextgen-ce" "defaultKubernetesSecretKey" "ACCESS_CONTROL_SECRET") | indent 12 }}
            - name: EVENTS_MONGO_DB_URL
              value: {{ include "harnesscommon.dbconnectionv2.mongoConnection" (dict "ctx" $ "database" "events" ) }}
            - name: NOTIFICATION_MONGO_URI
              value: {{ include "harnesscommon.dbconnectionv2.mongoConnection" (dict "ctx" $ "database" "notifications" ) }}
            - name: TIMESCALEDB_URI
              value: {{ include "harnesscommon.dbconnectionv2.timescaleConnection" (dict "protocol" "jdbc:postgresql" "database" "harness" "context" $) }}
            {{- if .Values.global.database.clickhouse.enabled }}
            {{- $globalClickhouseESOSecretIdentifier := include "harnesscommon.secrets.globalESOSecretCtxIdentifier" (dict "ctx" $  "ctxIdentifier" "clickhouse") }}
            {{- include "harnesscommon.secrets.manageEnv" (dict "ctx" $ "variableName" "CLICKHOUSE_USERNAME" "defaultValue" .Values.clickhouse.username "extKubernetesSecretCtxs" (list .Values.global.database.clickhouse.secrets.kubernetesSecrets) "esoSecretCtxs" (list (dict "secretCtxIdentifier" $globalClickhouseESOSecretIdentifier "secretCtx" .Values.global.database.clickhouse.secrets.secretManagement.externalSecretsOperator))) | indent 12 }}
            {{- include "harnesscommon.secrets.manageEnv" (dict "ctx" $ "variableName" "CLICKHOUSE_PASSWORD" "defaultKubernetesSecretName" .Values.clickhouse.password.name "defaultKubernetesSecretKey" .Values.clickhouse.password.key "extKubernetesSecretCtxs" (list .Values.global.database.clickhouse.secrets.kubernetesSecrets) "esoSecretCtxs" (list (dict "secretCtxIdentifier" $globalClickhouseESOSecretIdentifier "secretCtx" .Values.global.database.clickhouse.secrets.secretManagement.externalSecretsOperator))) | indent 12 }}      
            {{- end }}
          {{- if not .Values.workloadIdentity.enabled }}
          {{- if .Values.lifecycleHooks }}
          lifecycle: {{- include "harnesscommon.tplvalues.render" (dict "value" .Values.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          volumeMounts:
        {{- if .Values.extraVolumeMounts }}
        {{- include "harnesscommon.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" $) | nindent 10 }}
        {{- end }}
          - name: secret-mount
            mountPath: /opt/harness/svc
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- if not .Values.workloadIdentity.enabled }}
      volumes:
      {{- if .Values.extraVolumes }}
      {{- include "harnesscommon.tplvalues.render" ( dict "value" .Values.extraVolumes "context" $ ) | nindent 6 }}
      {{- end }}
      - name: secret-mount
        secret:
          secretName: ceng-secret-mount
          items:
          - key: ceng-gcp-credentials
            path: ceng_gcp_credentials.json
      {{- end }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - nextgen-ce
            topologyKey: "kubernetes.io/hostname"
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
