harness-mongo:
  uri: mongodb://localhost:27017/harness
  connectTimeout: 30000
  serverSelectionTimeout: 90000
  socketTimeout: 360000
  maxConnectionIdleTime: 600000
  connectionsPerHost: 50
  aliasDBName: harness
events-mongo:
  uri: mongodb://localhost:27017/events
  connectTimeout: 30000
  serverSelectionTimeout: 90000
  socketTimeout: 360000
  maxConnectionIdleTime: 600000
  maxOperationTimeInMillis: 1800000
  connectionsPerHost: 300
  indexManagerMode: AUTO
  aliasDBName: events

timescaledb:
  timescaledbUrl: "jdbc:postgresql://localhost:5432/harness"
  timescaledbUsername: "postgres"
  timescaledbPassword: ""
  connectTimeout: 300
  socketTimeout: 900
  logUnclosedConnections: false
  loggerLevel: OFF
  isHealthCheckNeeded: false
  sslMode: disable
  sslRootCert: ""

batch-job-postgresdb:
  timescaledbUrl: "jdbc:postgresql://localhost:5432/harness_batch_qa"
  timescaledbUsername: "postgres"
  timescaledbPassword: ""
  connectTimeout: 300
  socketTimeout: 900
  logUnclosedConnections: false
  loggerLevel: OFF
  isHealthCheckNeeded: false
  sslMode: disable
  sslRootCert: ""

batchQueryConfig:
  queryBatchSize: 1000
  billingDataQueryBatchSize: 4000
  instanceDataBatchSize: 5000
  syncJobDisabled: false
  disableBatchJobsInCG: true

bulkOperationBatchQueryConfig:
  queryBatchSize: 400

podInfo:
  name: batch-processing-0
  replica: 1
  isolatedReplica: 0

awsS3SyncConfig:
  awsS3BucketName: awsS3BucketNamePlaceHolder
  awsAccessKey: awsS3SyncAccessKeyPlaceHolder
  awsSecretKey: awsS3SyncSecretKeyPlaceHolder
  region: awsS3SyncRegionPlaceHolder
  awsS3SyncTimeoutMinutes: 30

azureStorageSyncConfig:
  azureStorageAccountName: PlaceHolder
  azureStorageContainerName: PlaceHolder
  azureAppClientId: PlaceHolder
  azureAppClientSecret: PlaceHolder
  azureTenantId: PlaceHolder
  azureSasToken: PlaceHolder
  syncJobDisabled: true

billingDataPipelineConfig:
  gcpProjectId: gcpProjectIdPlaceHolder
  gcsBasePath: gcsBasePathPlaceHolder
  gcpPipelinePubSubTopic: "ce-gcpdata"
  gcpSyncPubSubTopic: "ce-gcp-billing-cf"
  isGcpSyncEnabled: false
  gcpUseNewPipeline: false
  awsUseNewPipeline: false
  clusterDataGcsBucketName: "clusterdata-qa"
  clusterDataGcsBackupBucketName: "clusterdata-qa-backup"
  awsRoleName: harnessContinuousEfficiencyRole
  bufferSizeInMB: 100

smtp:
  type: SMTP
  host: host_placeholder
  port: 465
  fromAddress: ce-noreply@harness.io
  useSSL: true
  username: ""
  password: ""

segmentConfig:
  enabled: false
  apiKey: "segment_api_key"

baseUrl: https://localhost:8000

cfClientConfig:
  apiKey: "2b5bfaef-6dfc-49ac-940a-96ad9e77a4a6"
  configUrl: "https://config.feature-flags.uat.harness.io/api/1.0"
  eventUrl: "https://event.feature-flags.uat.harness.io/api/1.0"
  analyticsEnabled: true
  connectionTimeout: 10000
  readTimeout: 45000
  retries: 6
  sleepInterval: 5000

cfMigrationConfig:
  enabled: false
  adminUrl : "http://localhost:3000/api/1.0"
  apiKey: ""
  account: "default"
  org: "default_org"
  project: "project1"
  environment: "environment1"
  connectionTimeout: 10000
  readTimeout: 30000

featureFlagConfig:
  featureFlagSystem: LOCAL
  syncFeaturesToCF: false

reportScheduleConfig:
  enabled: true
  templateName: "ce_scheduled_report"

scheduler-jobs-config:
  budgetAlertsJobCron: "0 30 14 * * ?"
  weeklyReportsJobCron: "0 0 14 * * MON"
  budgetCostUpdateJobCron: "0 0 14 * * ?"
  connectorHealthUpdateJobCron: "0 0 14 * * ?"
  awsAccountTagsCollectionJobCron : "0 0 9 * * ?"
  governanceRecommendationJobCronAws : "0 0 0 * * *"
  governanceRecommendationJobCronAzure : "0 0 8 * * *"
  dailyBudgetAlertsJobCron: "0 30 14 * * ?"
  dailyBudgetCostUpdateJobCron: "0 0 14 * * ?"

cePythonService:
  pythonServiceUrl: "http://0.0.0.0:8081"
  useProphet: false

banzaiConfig:
  host: "http://35.232.8.217"
  port: 80

ngManagerServiceHttpClientConfig:
  baseUrl: https://nginx-ingress-controller.ingress-nginx.svc.cluster.local/ng/api/
  connectTimeOutSeconds: 15
  readTimeOutSeconds: 15

ceNgServiceHttpClientConfig:
  baseUrl: http://localhost:7340/api/
  connectTimeOutSeconds: 15
  readTimeOutSeconds: 15

# banzaicloud/telescopes repo
banzaiRecommenderConfig:
  baseUrl: http://104.155.154.180:9090/
  connectTimeOutSeconds: 15
  readTimeOutSeconds: 15

ngManagerServiceSecret: UeWgUReGXlbrB0zkDCBFz1EDfU1zrXbhAbGfQ8jsSCaA881SYFMlHqnn3OQnAKAU6hTQ5NniwuMeKSFW
ceNgServiceSecret: UeWgUReGXlbrB0zkDCBFz1EDfU1zrXbhAbGfQ8jsSCaA881SYFMlHqnn3OQnAKAU6hTQ5NniwuMeKSFW
awsCurBilling: true

connectorHealthUpdateJobConfig:
  enabled: true

awsAccountTagsCollectionJobConfig:
  enabled: true

gcpConfig:
  gcpProjectId: "ccm-play"
  gcpAwsConnectorCrudPubSubTopic: "ce-aws-connector-crud"
  bigQueryUpdatePubSubTopic:
    enabled: true
    topicName: ccm-bigquery-batch-update
    subscriptionName: batch-processing-ccm-bigquery-batch-update-subscriber

notificationClient:
  messageBroker:
    type: MONGO
    uri: mongodb://localhost:27017/notificationChannel
    connectTimeout: 30000
    serverSelectionTimeout: 90000
    socketTimeout: 360000
    maxConnectionIdleTime: 600000
    connectionsPerHost: 300
  httpClient:
    baseUrl: http://localhost:9005
    connectTimeOutSeconds: 15
    readTimeOutSeconds: 15
  secrets:
    notificationClientSecret: IC04LYMBf1lDP5oeY4hupxd4HJhLmN6azUku3xEbeE3SUx5G3ZYzhbiwVtK4i7AmqyU9OZkwB4v8E9qM

lightwingAutoCUDClientConfig:
  baseUrl: http://localhost:9090/
  connectTimeOutSeconds: 15
  readTimeOutSeconds: 15

dkronClientConfig:
  baseUrl: http://localhost:8080/
  connectTimeOutSeconds: 50
  readTimeOutSeconds: 50

currencyPreferences:
  historicalUpdateMonthsCount: 3

clickHouseConfig:
  url: "jdbc:ch://clickhouse.harness.svc.cluster.local:8123"
  username: "default"
  password: ""
  socketTimeout: 86400000

deployMode: KUBERNETES

isClickHouseEnabled: false

recommendationConfig:
  regionsLimit: 5
  accountLimit: 15
  governanceRecommendationEnabledAws: false
  governanceRecommendationEnabledAzure: false

governanceConfig:
  useDkron: true
  callbackApiEndpoint: http://localhost:7340/ccm/api/governance/enqueue
  dkronJobEnabled: true
  awsFaktoryJobType: aws-governance # This should match with worker
  awsFaktoryQueueName: aws-governance # This should match with worker
  azureFaktoryJobType: azure-governance # This should match with worker
  azureFaktoryQueueName: azure-governance # This should match with worker
  OOTBAccount: wFHXHD0RRQWoO8tIZT5YVw
  tagsKey: dc
  tagsValue: dc1:1
  policyPerAccountLimit: 300
  accountLimit: 100
  regionLimit: 30
  packsInEnforcement: 30
  policiesInEnforcement: 30
  policiesInPack: 30
  sleepTime: 60

azureVmPricingConfig:
  baseUrl: https://prices.azure.com/api/retail/
  connectTimeOutSeconds: 15
  readTimeOutSeconds: 15

managerServiceHttpClientConfig:
  baseUrl: http://localhost:3457/api/
  connectTimeOutSeconds: 15
  readTimeOutSeconds: 15

batchJobRepository:
  timescaleEnabled: false
  metadataCleanupSchedule: "0 */30 * * * ?"
  dataRetentionPeriodInDays: 7

proxy:
  enabled: false
  host: localhost
  port: 80
  username: ""
  password: ""
  protocol: https

cliProxy:
  enabled: false
  host: localhost
  port: 80
  username: ""
  password: ""
  protocol: http

awsServiceEndpointUrls:
  enabled: false
  endPointRegion: us-east-1
  stsEndPointUrl: https://sts.us-east-1.amazonaws.com
  ecsEndPointUrl: https://ecs.us-east-1.amazonaws.com
  cloudwatchEndPointUrl: https://monitoring.us-east-1.amazonaws.com