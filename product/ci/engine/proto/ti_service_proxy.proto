// Copyright 2021 Harness Inc. All rights reserved.
// Use of this source code is governed by the PolyForm Free Trial 1.0.0 license
// that can be found in the licenses directory at the root of this repository, also available at
// https://polyformproject.org/wp-content/uploads/2020/05/PolyForm-Free-Trial-1.0.0.txt.

syntax = "proto3";

package io.harness.product.ci.engine.proto;

option java_multiple_files = true;
option go_package = "cienginepb";

// Callgraph upload request object
message UploadCgRequest {
  string step_id = 1;
  string repo = 2;
  string sha = 3;
  string source = 4;  // source branch
  string data_dir = 5;
  string target = 6;  // target branch
  int64 time_ms = 7;  // time taken for the test step to complete
}

message UploadCgResponse {
  string cg_msg = 1;
  bool empty_cg = 2;
}

// Definitions to interact with TI service
message WriteTestsRequest {
  string step_id = 1;
  repeated string tests = 2;
  string repo = 3;
  string sha = 4;
  string commit_link = 5;
}

message WriteTestsResponse {}

message SelectTestsRequest {
  string step_id = 1;
  string repo = 2;
  string sha = 3;
  string source_branch = 4;
  string target_branch = 5;
  // This is marshalled form of types.SelectTestsReq{} which contains changed
  // files and the configuration object. This is sent as the body of the
  // HTTP request to TI service by the lite engine.
  // This is done to avoid redefining the structs in code as well as proto.
  // Calls via lite engine use json encoded structs and can be decoded
  // on the TI service.
  string body = 6;
}

// (TODO): `tests` should ideally be a protobuf defined in a single place.
// Needs to be changed in other places as well. Right now proxy interaction
// is done using JSON.
message SelectTestsResponse {
  string selected = 1;
}

message DownloadLinkRequest {
  string language = 1;
  string os = 2;
  string arch = 3;
  string framework = 4;
  string version = 5;
  string env = 6;
}

message DownloadLinkResponse {
  string links = 1;
}

message GetTestTimesRequest {
  string repo = 1;
  string body = 2;
}

message GetTestTimesResponse {
  string time_data_map = 1;
}

message GetLastSuccCommitInfoRequest {
  string step_id = 1;
  string repo = 2;
  string branch = 3;
}

message GetLastSuccCommitInfoResponse {
  string commit_info = 1;
}

message GetChangedFilesPushTriggerRequest {
  string step_id = 1;
  string last_succ_commit = 2;
  string current_commit = 3;
}

message GetChangedFilesPushTriggerResponse {
  string changed_files = 1;
}

service TiProxy {
  // RPC to stream test cases from the addon
  rpc WriteTests(stream WriteTestsRequest) returns (WriteTestsResponse);

  // RPC to stream the tests to run to the addon from the TI server
  // List of changed files will (should) not be larger than 5MB.
  // However the list of tests received may be quite large and might need streaming.
  // TODO: Convert the response to a streaming response.
  rpc SelectTests(SelectTestsRequest) returns (SelectTestsResponse);

  // Upload callgraph to lite engine which forwards the call to ti service.
  rpc UploadCg(UploadCgRequest) returns (UploadCgResponse);

  // Get download links from lite engine which forwards the call to ti service.
  rpc DownloadLink(DownloadLinkRequest) returns (DownloadLinkResponse);

  // Get test timing data from lite engine which forwards the call to ti service.
  rpc GetTestTimes(GetTestTimesRequest) returns (GetTestTimesResponse);

  // Get the last successful commit info for a particular account, repo, branch in Push Trigger Case
  rpc GetLastSuccCommitInfo(GetLastSuccCommitInfoRequest) returns (GetLastSuccCommitInfoResponse);

  // Get the changed files incase of a push trigger execution
  rpc GetChangedFilesPushTrigger(GetChangedFilesPushTriggerRequest) returns (GetChangedFilesPushTriggerResponse);
}
